Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.

The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.

Return the quotient after dividing dividend by divisor.

Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.

 

Example 1:

Input: dividend = 10, divisor = 3
Output: 3
Explanation: 10/3 = 3.33333.. which is truncated to 3.
Example 2:

Input: dividend = 7, divisor = -3
Output: -2
Explanation: 7/-3 = -2.33333.. which is truncated to -2.


class Solution {
public:
    int divide(int dividend, int divisor) {
        // Check for edge cases
        if (divisor == 0) return INT_MAX;
        if (dividend == INT_MIN && divisor == -1) return INT_MAX;

        // Convert both numbers to long to handle overflow
        long ldividend = labs(dividend);
        long ldivisor = labs(divisor);

        // Determine the sign of the quotient
        int sign = ((dividend < 0) ^ (divisor < 0)) ? -1 : 1;

        // Perform long division
        long quotient = 0;
        while (ldividend >= ldivisor) {
            long temp = ldivisor;
            long multiple = 1;
            while (temp << 1 <= ldividend) {
                temp <<= 1;
                multiple <<= 1;
            }
            ldividend -= temp;
            quotient += multiple;
        }

        return sign * quotient;
    }
};


The solution first handles edge cases: if the divisor is 0, we return INT_MAX; if the dividend is INT_MIN and the divisor is -1, we return INT_MAX (since the quotient would be too large to represent as an int).

We then convert both numbers to long to handle overflow. We also determine the sign of the quotient by checking whether the two numbers have opposite signs using the XOR operator.

We then perform long division by repeatedly subtracting the divisor from the dividend until the dividend is less than the divisor. We use a variable temp to keep track of the current multiple of the divisor and another variable multiple to keep track of how many times we've multiplied the divisor. We shift temp and multiple left by 1 until temp is greater than the dividend, at which point we subtract temp from the dividend and add multiple to the quotient.

After the loop completes, we return the quotient multiplied by the sign.