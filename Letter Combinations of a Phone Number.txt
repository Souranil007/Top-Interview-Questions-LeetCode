Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]


class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> res;
        if (digits.empty()) return res;
        vector<string> mapping = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        string current = "";
        backtrack(digits, mapping, 0, current, res);
        return res;
    }
    
    void backtrack(string& digits, vector<string>& mapping, int index, string& current, vector<string>& res) {
        if (index == digits.length()) {
            res.push_back(current);
            return;
        }
        string letters = mapping[digits[index] - '0'];
        for (int i = 0; i < letters.length(); i++) {
            current.push_back(letters[i]);
            backtrack(digits, mapping, index+1, current, res);
            current.pop_back();
        }
    }
};
