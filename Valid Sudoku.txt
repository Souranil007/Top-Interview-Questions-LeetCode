Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.


class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        // Initialize sets to keep track of row, column, and box numbers
        unordered_set<char> rowSet[9], colSet[9], boxSet[9];
        
        // Loop through each cell in the board
        for(int i=0; i<9; i++) {
            for(int j=0; j<9; j++) {
                char num = board[i][j];
                
                // Check if the cell is empty or if the number has already been used in the same row, column, or box
                if(num == '.') continue;
                if(rowSet[i].count(num) || colSet[j].count(num) || boxSet[(i/3)*3+j/3].count(num)) return false;
                
                // Add the number to the corresponding sets
                rowSet[i].insert(num);
                colSet[j].insert(num);
                boxSet[(i/3)*3+j/3].insert(num);
            }
        }
        
        return true;
    }
};
The above code uses unordered sets to keep track of the numbers used in each row, column, and box. It loops through each cell in the board, checks if the cell is empty or if the number has already been used in the same row, column, or box, and adds the number to the corresponding sets if it hasn't been used before. If any of the checks fail, the function returns false. If all the checks pass, the function returns true.