Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.

You must not use any built-in exponent function or operator.

For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.
 

Example 1:

Input: x = 4
Output: 2
Explanation: The square root of 4 is 2, so we return 2.
Example 2:

Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.


class Solution {
public:
    int mySqrt(int x) {
        if (x == 0 || x == 1) return x;
        int left = 1, right = x, ans = 0;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (mid <= x / mid) {
                ans = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return ans;
    }
};


In this solution, we first handle the base cases where x is 0 or 1, in which case we simply return x. We then initialize two pointers left and right to 1 and x respectively, and an ans variable to store the final result.

We then perform a binary search between left and right, checking the square of the middle value mid in each iteration. If mid squared is less than or equal to x, we update ans to mid, move the left pointer to mid + 1, and continue the search on the right half. Otherwise, we move the right pointer to mid - 1 and continue the search on the left half.

After the search is complete, we return the final value of ans, which will be the largest integer whose square is less than or equal to x.