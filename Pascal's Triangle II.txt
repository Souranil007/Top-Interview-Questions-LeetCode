Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: rowIndex = 3
Output: [1,3,3,1]
Example 2:

Input: rowIndex = 0
Output: [1]
Example 3:

Input: rowIndex = 1
Output: [1,1]


class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<int> row(rowIndex + 1, 1);
        for (int i = 1; i < rowIndex; i++) {
            for (int j = i; j >= 1; j--) {
                row[j] += row[j-1];
            }
        }
        return row;
    }
};


In the code above, we first create a vector called row of size rowIndex + 1, and initialize all the values to 1, which represents the first and last elements of the row. Then, we use two nested loops to update the values in row based on the previous values.

The outer loop runs from 1 to rowIndex - 1, because the first and last elements are always 1. The inner loop runs from i to 1, because we want to update the values from right to left. For each j, we update row[j] by adding the previous value row[j-1].

After the loops finish, row contains the rowIndex-th row of Pascal's triangle, which we return as the solution to the problem.