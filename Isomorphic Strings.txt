Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = "egg", t = "add"
Output: true
Example 2:

Input: s = "foo", t = "bar"
Output: false
Example 3:

Input: s = "paper", t = "title"
Output: true


class Solution {
public:
    bool isIsomorphic(string s, string t) {
        if(s.length() != t.length()){ // strings must be of equal length
            return false;
        }
        unordered_map<char, char> s2t; // map s to t
        unordered_map<char, char> t2s; // map t to s
        for(int i = 0; i < s.length(); i++){
            if(s2t.count(s[i])){ // s[i] already mapped
                if(s2t[s[i]] != t[i]){ // mismatch
                    return false;
                }
            }
            else{
                s2t[s[i]] = t[i];
                if(t2s.count(t[i])){ // t[i] already mapped to another character
                    return false;
                }
                t2s[t[i]] = s[i];
            }
        }
        return true;
    }
};



