Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

 

Example 1:

Input: pattern = "abba", s = "dog cat cat dog"
Output: true
Example 2:

Input: pattern = "abba", s = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false



class Solution {
public:
    bool wordPattern(string pattern, string s) {
        unordered_map<char, string> charToStrMap;
        unordered_map<string, char> strToCharMap;
        
        istringstream iss(s);
        string word;
        int i = 0;
        
        while (iss >> word) {
            if (i >= pattern.length()) {
                return false; // More words in str than pattern characters
            }
            
            char c = pattern[i];
            
            if (charToStrMap.find(c) != charToStrMap.end()) {
                if (charToStrMap[c] != word) {
                    return false; // Pattern mismatch
                }
            } else {
                charToStrMap[c] = word;
            }
            
            if (strToCharMap.find(word) != strToCharMap.end()) {
                if (strToCharMap[word] != c) {
                    return false; // Pattern mismatch
                }
            } else {
                strToCharMap[word] = c;
            }
            
            i++;
        }
        
        return i == pattern.length(); // Check if all pattern characters are used
    }
};