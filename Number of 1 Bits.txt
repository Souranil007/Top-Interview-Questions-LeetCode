Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).

Note:

Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.
 

Example 1:

Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.
Example 2:

Input: n = 00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.
Example 3:

Input: n = 11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.



class Solution {
public:
    int hammingWeight(uint32_t n) {
        int count = 0;
        while(n != 0){
            count++;
            n &= (n - 1);
        }
        return count;
    }
};


Explanation:

The function takes an unsigned integer n as input and returns the number of 1 bits in its binary representation. The solution works by using a loop to repeatedly clear the least significant 1 bit in n and incrementing a counter until n becomes zero.

The loop condition checks if n is not equal to zero, which means there are still 1 bits left in n. In each iteration, we increment the counter by 1 and clear the least significant 1 bit in n using the bitwise AND operation with (n - 1).

The expression (n - 1) creates a binary number with all the bits to the right of the least significant 1 bit in n flipped to 1 and all the bits to the left of the least significant 1 bit unchanged. Therefore, the bitwise AND operation with (n - 1) clears the least significant 1 bit in n.

After all the 1 bits in n have been cleared, the loop condition becomes false, and we return the counter that holds the number of 1 bits in n.